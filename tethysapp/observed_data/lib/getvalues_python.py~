##################HIS to CIWATER################
## Version 0.2.1
## Developed by : Rohit Khattar
## Modified by : Matt Saguibo
## BYU
## Note : 
##############################################


#Import Required Libraries (These are included by default with python, hence no additional setups required)
import urllib2,urllib, json
from xml.dom import minidom
import xml.etree.ElementTree as ET



def getSitesinBBOX(xmin,ymin,xmax,ymax,keyword):

    #Sending out a POST request to get data from HIS Central

    url = 'http://hiscentral.cuahsi.org/webservices/hiscentral.asmx/GetSitesInBox2'
    values = {'xmin' : xmin,
          'xmax' : xmax,
          'ymin' : ymin,
          'ymax' : ymax,
          'conceptKeyword' : keyword,
            'networkIDs':""}
    data = urllib.urlencode(values)
    req = urllib2.Request(url, data)

    try:
        response = urllib2.urlopen(req)
        the_page = response.read()
    except urllib2.HTTPError, error:
        print error.read()
    
    xmldoc = minidom.parseString(the_page)
    sitelist = xmldoc.getElementsByTagName('Site') 

    #Prepare List of sites
    sites=[]
    services = set()
    for site in sitelist:
        serviceURL = site.getElementsByTagName('servURL')[0].firstChild.nodeValue
        services.add(serviceURL);
        newSite = {'sitename': site.getElementsByTagName('SiteName')[0].firstChild.nodeValue,
                   'SiteCode': site.getElementsByTagName('SiteCode')[0].firstChild.nodeValue,
                   'servURL': serviceURL,
                   'Latitude': site.getElementsByTagName('Latitude')[0].firstChild.nodeValue,
                   'Longitude': site.getElementsByTagName('Longitude')[0].firstChild.nodeValue
                                 }
        sites.append(newSite)
    
    return sites,services



def getTSJSON(values,ts):
    return json.dumps(zip(values,ts))
    


def sendReq(site,varCode,startDate,endDate):
    #Define Parameters for data retrieval

    url =  site['servURL']#Service URL
    url=url.replace("?WSDL",'/GetValuesObject')
    siteCode = site['SiteCode']
    variableCode = varCode
    
    threshold = "0.01" #data below this will not be considered. $@TODO

    values = {'location' : siteCode,
          'variable' : variableCode,
          'startDate' : startDate,
          'endDate' : endDate,
          'authToken':""}
    
    data = urllib.urlencode(values)
    req = urllib2.Request(url, data)
    the_page = ""
    try:
        response = urllib2.urlopen(req)
        the_page = response.read()
    except urllib2.HTTPError, error:
        print error.read()
    
    values,ts = parseData(the_page)
    outputJSON = getTSJSON(values,ts)
    return outputJSON, values, ts
    


def parseData(getvalues_data):

    #Data Parsing
    
    xmldoc = minidom.parseString(getvalues_data)
    valuelist = xmldoc.getElementsByTagName('value') 
    unit = "ft"

    values = []
    timeStamps = []

    for value in valuelist:
        values.append("%.2f" % (float(value.firstChild.nodeValue)))
        timeStamps.append(str(value.attributes['dateTime'].value))

    return values, timeStamps




#Function To process each site and display the list of sites to fetch data

def userMenu(sites,variableCode,startDate,endDate,siteID):
    selection = siteID
    site = sites[selection-1]
    varCode = variableCode
    valuesJSON, values, ts = sendReq(site,varCode,startDate,endDate)
    return valuesJSON, values, ts



def getJSON(sites):

    outputJSON = {'type': "FeatureCollection",'features' :[]}
    #Build Feature from site data

    for site in sites:
        feature = {
             "type": "Feature",
             "geometry": {"type": "Point", "coordinates": [site['Latitude'], site['Longitude']]},
             "properties": {"name": site['sitename'],"code": site['SiteCode'],"service": site['servURL'], }
            }
        outputJSON['features'].append(feature)
    
    return json.dumps(outputJSON)




# Function to create a list of sites suitable for the editable map
def getPlotJSON(sites):

    outputPlotJSON = {"type": "FeatureCollection",'features':[]}
    #Build Feature from site data
    nameSites= []
    
    i = 1
    for site in sites:
        geometries = dict(type = "Point", coordinates = [site['Latitude'], site['Longitude']], properties={"name": i, "value":site['sitename']})
        outputPlotJSON['features'].append(geometries)
        nameSite = (site['sitename'],i)
        nameSites.append(nameSite)
        i += 1

    return outputPlotJSON, nameSites







# This code could be used for future use in HIS-Central

def getVariablefromXML(xml,keyword):
    #XML Parsing is not working due to some namespace issues.
    #Doing a simple string search and then from there will extract the code
    pos1 = xml.find('<variableName>'+keyword)
    if pos1==-1:
        pos1= xml.find('&lt;variableName&gt;'+keyword)
    if not pos1 ==-1:
        pos2 = xml.rfind('variableCode vocabulary="', 0, pos1)
        pos3 = xml.find('"', pos2+26)
        pos4 = xml.find('&gt;', pos2)
        pos5 = xml.find('&lt;/variableCode&gt;',pos4)
        return xml[pos2+25:pos3]+":"+xml[pos4+4:pos5]
    else:
        return ""
    
    #To ADD Support for multiple precipitation values
    #TODO : Also change this to mindom module instead, use the object url to get the data

def getVarCode(services,keyword):
    #This function queries the server for the Variable code for our keyword
    varCodes={}
    for service in services:
        service1=service.replace("?WSDL",'/GetVariables?authToken=""')
        req = urllib2.Request(service1)
        try:
            response = urllib2.urlopen(req)
            the_page = response.read()
            var = getVariablefromXML(the_page,keyword)
            if not (var == "" or var is None):

                varCodes[service]=var
        except urllib2.HTTPError, error:
            print error.read() 
    return varCodes
